// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hourly.GitService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250615230604_initCreate")]
    partial class initCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hourly.GitService.Domain.Entities.GitCommit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("AuthoredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("authored_date");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtCommitId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_commit_id");

                    b.Property<string>("ExtCommitShortId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ext_commit_short_id");

                    b.Property<Guid>("GitRepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("git_repository_id");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GitRepositoryId");

                    b.ToTable("git_commits", (string)null);
                });

            modelBuilder.Entity("Hourly.GitService.Domain.Entities.GitRepository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExtRepositoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_repository_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("namespace");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.ToTable("git_repository", (string)null);
                });

            modelBuilder.Entity("Hourly.GitService.Infrastructure.Persistence.ReadModels.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("GitAccessToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("git_access_token");

                    b.Property<string>("GitEmail")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("git_email");

                    b.Property<string>("GitUsername")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("git_username");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.GitService.Domain.Entities.GitCommit", b =>
                {
                    b.HasOne("Hourly.GitService.Infrastructure.Persistence.ReadModels.UserReadModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hourly.GitService.Domain.Entities.GitRepository", "GitRepository")
                        .WithMany("GitCommits")
                        .HasForeignKey("GitRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("GitRepository");
                });

            modelBuilder.Entity("Hourly.GitService.Domain.Entities.GitRepository", b =>
                {
                    b.Navigation("GitCommits");
                });
#pragma warning restore 612, 618
        }
    }
}
