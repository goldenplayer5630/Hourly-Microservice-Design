// <auto-generated />
using System;
using Hourly.UserService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hourly.UserService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250613160117_initCreate")]
    partial class initCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GitAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("git_access_token");

                    b.Property<string>("GitEmail")
                        .HasColumnType("text")
                        .HasColumnName("git_email");

                    b.Property<string>("GitUsername")
                        .HasColumnType("text")
                        .HasColumnName("git_username");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<float>("TVTHourBalance")
                        .HasColumnType("real")
                        .HasColumnName("tvt_hour_balance");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.UserContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContractFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("contract_file_path");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer")
                        .HasColumnName("contract_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<double?>("GrossHourlyRate")
                        .HasColumnType("double precision")
                        .HasColumnName("gross_hourly_rate");

                    b.Property<int?>("HolidayHoursPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("holiday_hours_percentage");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<double>("MaxWeeklyHours")
                        .HasColumnType("double precision")
                        .HasColumnName("max_weekly_hours");

                    b.Property<double>("MinWeeklyHours")
                        .HasColumnType("double precision")
                        .HasColumnName("min_weekly_hours");

                    b.Property<bool>("MonthlyPaidHolidayHours")
                        .HasColumnType("boolean")
                        .HasColumnName("monthly_paid_holiday_hours");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_contract", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Infrastructure.Persistence.ReadModels.GitCommitReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("git_commit_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Infrastructure.Persistence.ReadModels.WorkSessionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_contract_id");

                    b.HasKey("Id");

                    b.HasIndex("UserContractId");

                    b.ToTable("work_session_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.User", b =>
                {
                    b.HasOne("Hourly.UserService.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Hourly.UserService.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.UserContract", b =>
                {
                    b.HasOne("Hourly.UserService.Domain.Entities.User", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hourly.UserService.Infrastructure.Persistence.ReadModels.GitCommitReadModel", b =>
                {
                    b.HasOne("Hourly.UserService.Domain.Entities.User", "Author")
                        .WithMany("GitCommits")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Hourly.UserService.Infrastructure.Persistence.ReadModels.WorkSessionReadModel", b =>
                {
                    b.HasOne("Hourly.UserService.Domain.Entities.UserContract", "UserContract")
                        .WithMany("WorkSessions")
                        .HasForeignKey("UserContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserContract");
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.User", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("GitCommits");
                });

            modelBuilder.Entity("Hourly.UserService.Domain.Entities.UserContract", b =>
                {
                    b.Navigation("WorkSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
