// <auto-generated />
using System;
using Hourly.TimeTrackingService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hourly.TimeTrackingService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hourly.TimeTrackingService.Domain.Entities.WorkSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float>("BreakTime")
                        .HasColumnType("real")
                        .HasColumnName("break_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_time");

                    b.Property<float>("Factor")
                        .HasColumnType("real")
                        .HasColumnName("factor");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<string>("OtherRemarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("other_remarks");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<float>("TVTAccruedHours")
                        .HasColumnType("real")
                        .HasColumnName("tvt_accrued_hours");

                    b.Property<float>("TVTUsedHours")
                        .HasColumnType("real")
                        .HasColumnName("tvt_used_hours");

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("task_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_contract_id");

                    b.Property<bool>("WBSO")
                        .HasColumnType("boolean")
                        .HasColumnName("wbso");

                    b.HasKey("Id");

                    b.HasIndex("UserContractId");

                    b.ToTable("work_session", (string)null);
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitCommitReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("AuthoredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("authored_date");

                    b.Property<string>("ExtCommitId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_commit_id");

                    b.Property<string>("ExtCommitShortId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_commit_short_id");

                    b.Property<Guid>("GitRepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("git_repository_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GitRepositoryId");

                    b.ToTable("git_commit_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitRepositoryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ExtRepositoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ext_repository_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_url");

                    b.HasKey("Id");

                    b.ToTable("git_repository_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserContractReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_contract_read_model", (string)null);
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("TVTHourBalance")
                        .HasColumnType("real")
                        .HasColumnName("tvt_hour_balance");

                    b.HasKey("Id");

                    b.ToTable("user_read_model", (string)null);
                });

            modelBuilder.Entity("git_commit_work_sessions", b =>
                {
                    b.Property<Guid>("git_commit_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("work_session_id")
                        .HasColumnType("uuid");

                    b.HasKey("git_commit_id", "work_session_id");

                    b.HasIndex("work_session_id");

                    b.ToTable("git_commit_work_sessions", (string)null);
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Domain.Entities.WorkSession", b =>
                {
                    b.HasOne("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserContractReadModel", "UserContract")
                        .WithMany("WorkSessions")
                        .HasForeignKey("UserContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserContract");
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitCommitReadModel", b =>
                {
                    b.HasOne("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserReadModel", "Author")
                        .WithMany("GitCommits")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_git_commit_author");

                    b.HasOne("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitRepositoryReadModel", "GitRepository")
                        .WithMany("GitCommits")
                        .HasForeignKey("GitRepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_git_commit_repository");

                    b.Navigation("Author");

                    b.Navigation("GitRepository");
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserContractReadModel", b =>
                {
                    b.HasOne("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserReadModel", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("git_commit_work_sessions", b =>
                {
                    b.HasOne("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitCommitReadModel", null)
                        .WithMany()
                        .HasForeignKey("git_commit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wsgc_git_commit");

                    b.HasOne("Hourly.TimeTrackingService.Domain.Entities.WorkSession", null)
                        .WithMany()
                        .HasForeignKey("work_session_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wsgc_work_session");
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.GitRepositoryReadModel", b =>
                {
                    b.Navigation("GitCommits");
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserContractReadModel", b =>
                {
                    b.Navigation("WorkSessions");
                });

            modelBuilder.Entity("Hourly.TimeTrackingService.Infrastructure.Persistence.ReadModels.UserReadModel", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("GitCommits");
                });
#pragma warning restore 612, 618
        }
    }
}
